package sprint3.test;
import sprint3.product.SimpleGame;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class SimpleGameTest {

	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}

    @Test
    void testBoardInitialization() {
    	SimpleGame game = new SimpleGame(3);
        assertEquals(3, game.getBoardSize());
        for (int row = 0; row < game.getBoardSize(); row++) {
            for (int col = 0; col < game.getBoardSize(); col++) {
                assertEquals(SimpleGame.Cell.EMPTY, game.getCell(row, col)); // All cells should be initialized to EMPTY
            }
        }
        assertEquals(SimpleGame.GameState.PLAYING, game.getCurrentGameStatus());     // Game status should be PLAYING at start
    }

    @Test
    void testCustomBoardSizeInitialization() {
        int customBoardSize = 5;
        SimpleGame customGame = new SimpleGame(customBoardSize);
        assertEquals(customBoardSize, customGame.getBoardSize());
    }

    @Test
    void testMakeMove() {
    	SimpleGame game = new SimpleGame(3);
        assertTrue(game.makeMove(0, 0, SimpleGame.Cell.S));
        assertEquals(SimpleGame.Cell.S, game.getCell(0, 0));
    }

    @Test
    void testSwitchPlayers() {
    	SimpleGame game = new SimpleGame(3);
        game.setCurrentPlayer('B');
        game.switchPlayers();
        assertEquals('R', game.getCurrentPlayer()); // Current player should switch from B to R
    }

    @Test
    void testScoreUpdating() {
    	SimpleGame game = new SimpleGame(3);
        game.setCurrentPlayer('B');
        game.countSOS(); 
        assertEquals(1, game.getBlueScore());  // Blue score should be incremented
    }

    @Test
    void testEmptyBoard() {
    	SimpleGame game = new SimpleGame(3);  // New game is initialized to all cells empty
        assertFalse(game.isBoardFull());
    }

    @Test
    void testPartiallyFilledBoard() {
    	SimpleGame game = new SimpleGame(3);
        game.makeMove(0, 0, SimpleGame.Cell.S); // Fill one cell
        assertFalse(game.isBoardFull());
    }

    @Test
    void testCompletelyFilledBoard() {
    	SimpleGame game = new SimpleGame(3);
    	game.makeMove(0, 0, SimpleGame.Cell.S);
    	game.makeMove(0, 1, SimpleGame.Cell.S);
    	game.makeMove(0, 2, SimpleGame.Cell.S);
    	game.makeMove(1, 0, SimpleGame.Cell.S);
    	game.makeMove(1, 1, SimpleGame.Cell.S);
    	game.makeMove(1, 2, SimpleGame.Cell.S);
    	game.makeMove(2, 0, SimpleGame.Cell.S);
    	game.makeMove(2, 1, SimpleGame.Cell.S);
    	game.makeMove(2, 2, SimpleGame.Cell.S); 
        assertTrue(game.isBoardFull(), "The board is completely filled");
    }

    @Test
    void testValidMove() {
    	SimpleGame game = new SimpleGame(3);
        assertTrue(game.makeMove(0, 0, SimpleGame.Cell.S)); // Valid move
        assertEquals(SimpleGame.Cell.S, game.getSymbol(0, 0)); // Make sure cell is updated
        assertEquals('R', game.getCurrentPlayer());  // Make sure player switched from 'B' to 'R'
    }

    @Test
    void testInvalidMoveOutOfBoard() {
    	SimpleGame game = new SimpleGame(3);
        assertFalse(game.makeMove(4, 4, SimpleGame.Cell.O)); // Move out of bounds
    }

    @Test
    void testInvalidMoveOccupiedCell() {
    	SimpleGame game = new SimpleGame(3);
        game.makeMove(1, 1, SimpleGame.Cell.S); // Fill a cell
        assertFalse(game.makeMove(1, 1, SimpleGame.Cell.O)); // Move on cell already filled
    }

    @Test
    void testBlueWins() {
    	SimpleGame game = new SimpleGame(3);
    	game.makeMove(1, 0, SimpleGame.Cell.S);  // Default blue goes first
    	game.makeMove(1, 1, SimpleGame.Cell.O);   // Red's turn
    	game.makeMove(1, 2, SimpleGame.Cell.S);    // Blue's turn
    	assertEquals(SimpleGame.GameState.BLUE_WINS, game.getCurrentGameStatus());
    }

    @Test
    void testRedWins() {
    	SimpleGame game = new SimpleGame(3);
    	game.makeMove(0, 0, SimpleGame.Cell.O);   // Default blue goes first
    	game.makeMove(2, 0, SimpleGame.Cell.S);   // Red's turn
    	game.makeMove(2, 1, SimpleGame.Cell.O);   // Blue's turn
    	game.makeMove(2, 2, SimpleGame.Cell.S);   // Red's turn        
        assertEquals(SimpleGame.GameState.RED_WINS, game.getCurrentGameStatus());
    }

    @Test
    void testSOSInRow() {
    	SimpleGame game = new SimpleGame(3);
        game.makeMove(1, 0, SimpleGame.Cell.S);
        game.makeMove(1, 1, SimpleGame.Cell.O);
        game.makeMove(1, 2, SimpleGame.Cell.S);  // SOS event in second row
        assertFalse(!game.hasSOS());
    }

    @Test
    void testSOSInColumn() {
    	SimpleGame game = new SimpleGame(3);
    	game.makeMove(0, 1, SimpleGame.Cell.S);
    	game.makeMove(1, 1, SimpleGame.Cell.O);
    	game.makeMove(2, 1, SimpleGame.Cell.S);  // SOS event in second column
        assertFalse(!game.hasSOS()); 
    }

    @Test
    void testSOSInDiagonal() {
    	SimpleGame game = new SimpleGame(3);
    	game.makeMove(0, 2, SimpleGame.Cell.S);
    	game.makeMove(1, 1, SimpleGame.Cell.O);  
    	game.makeMove(2, 0, SimpleGame.Cell.S);  // SOS event top-right to bottom-left
        assertFalse(!game.hasSOS());
    }
}
